'use strict';

const React = require('react');
const {
  Text,
  Box
} = require('ink');
const importJsx = require('import-jsx');
const gltfjsx = require('../gltfjsx');
const ErrorBoundary = importJsx('./ErrorBoundary');
function Conversion({
  file,
  ...config
}) {
  let nameExt = file.match(/[-_\w]+[.][\w]+$/i)[0];
  let name = nameExt.split('.').slice(0, -1).join('.');
  let output = config.output ?? name.charAt(0).toUpperCase() + name.slice(1) + (config.types ? '.tsx' : '.js');
  const [done, setDone] = React.useState(false);
  const [log, setLog] = React.useState([]);
  React.useEffect(() => {
    async function run() {
      try {
        await gltfjsx(file, output, {
          ...config,
          setLog,
          timeout: 0,
          delay: 1
        });
        setDone(true);
      } catch (e) {
        setDone(() => {
          throw e;
        });
      }
    }
    run();
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, !done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "white"
  }, ' Parse '), /*#__PURE__*/React.createElement(Text, null, " ", (log[log.length - 1] || '').trim())), done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "green"
  }, ' Done: '), /*#__PURE__*/React.createElement(Text, null, " ", output), config.process && /*#__PURE__*/React.createElement(Text, null, ", ", name, "-processed.glb")));
}
module.exports = function App(props) {
  return /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(Conversion, props));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwiaW1wb3J0SnN4IiwiZ2x0ZmpzeCIsIkVycm9yQm91bmRhcnkiLCJDb252ZXJzaW9uIiwiZmlsZSIsImNvbmZpZyIsIm5hbWVFeHQiLCJtYXRjaCIsIm5hbWUiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsIm91dHB1dCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwidHlwZXMiLCJkb25lIiwic2V0RG9uZSIsInVzZVN0YXRlIiwibG9nIiwic2V0TG9nIiwidXNlRWZmZWN0IiwicnVuIiwidGltZW91dCIsImRlbGF5IiwiZSIsImxlbmd0aCIsInRyaW0iLCJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFwcCIsInByb3BzIl0sInNvdXJjZXMiOlsiQXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7IFRleHQsIEJveCB9ID0gcmVxdWlyZSgnaW5rJylcbmNvbnN0IGltcG9ydEpzeCA9IHJlcXVpcmUoJ2ltcG9ydC1qc3gnKVxuY29uc3QgZ2x0ZmpzeCA9IHJlcXVpcmUoJy4uL2dsdGZqc3gnKVxuY29uc3QgRXJyb3JCb3VuZGFyeSA9IGltcG9ydEpzeCgnLi9FcnJvckJvdW5kYXJ5JylcblxuZnVuY3Rpb24gQ29udmVyc2lvbih7IGZpbGUsIC4uLmNvbmZpZyB9KSB7XG4gIGxldCBuYW1lRXh0ID0gZmlsZS5tYXRjaCgvWy1fXFx3XStbLl1bXFx3XSskL2kpWzBdXG4gIGxldCBuYW1lID0gbmFtZUV4dC5zcGxpdCgnLicpLnNsaWNlKDAsIC0xKS5qb2luKCcuJylcbiAgbGV0IG91dHB1dCA9IGNvbmZpZy5vdXRwdXQgPz8gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkgKyAoY29uZmlnLnR5cGVzID8gJy50c3gnIDogJy5qcycpXG5cbiAgY29uc3QgW2RvbmUsIHNldERvbmVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtsb2csIHNldExvZ10gPSBSZWFjdC51c2VTdGF0ZShbXSlcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGdsdGZqc3goZmlsZSwgb3V0cHV0LCB7IC4uLmNvbmZpZywgc2V0TG9nLCB0aW1lb3V0OiAwLCBkZWxheTogMSB9KVxuICAgICAgICBzZXREb25lKHRydWUpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNldERvbmUoKCkgPT4ge1xuICAgICAgICAgIHRocm93IGVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcnVuKClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgeyFkb25lICYmIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VGV4dCBjb2xvcj1cImJsYWNrXCIgYmFja2dyb3VuZENvbG9yPVwid2hpdGVcIj5cbiAgICAgICAgICAgIHsnIFBhcnNlICd9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0PiB7KGxvZ1tsb2cubGVuZ3RoIC0gMV0gfHwgJycpLnRyaW0oKX08L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICAgIHtkb25lICYmIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VGV4dCBjb2xvcj1cImJsYWNrXCIgYmFja2dyb3VuZENvbG9yPVwiZ3JlZW5cIj5cbiAgICAgICAgICAgIHsnIERvbmU6ICd9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0PiB7b3V0cHV0fTwvVGV4dD5cbiAgICAgICAgICB7Y29uZmlnLnByb2Nlc3MgJiYgPFRleHQ+LCB7bmFtZX0tcHJvY2Vzc2VkLmdsYjwvVGV4dD59XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFwcChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgPENvbnZlcnNpb24gey4uLnByb3BzfSAvPlxuICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgKVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUM7QUFBSSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDcEMsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3ZDLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNyQyxNQUFNSyxhQUFhLEdBQUdGLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztBQUVsRCxTQUFTRyxVQUFVLENBQUM7RUFBRUMsSUFBSTtFQUFFLEdBQUdDO0FBQU8sQ0FBQyxFQUFFO0VBQ3ZDLElBQUlDLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEQsSUFBSUMsSUFBSSxHQUFHRixPQUFPLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQ3BELElBQUlDLE1BQU0sR0FBR1AsTUFBTSxDQUFDTyxNQUFNLElBQUlKLElBQUksQ0FBQ0ssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUUsR0FBR04sSUFBSSxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUlMLE1BQU0sQ0FBQ1UsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7RUFFNUcsTUFBTSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sQ0FBQyxHQUFHckIsS0FBSyxDQUFDc0IsUUFBUSxDQUFDLEtBQUssQ0FBQztFQUM3QyxNQUFNLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxDQUFDLEdBQUd4QixLQUFLLENBQUNzQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXhDdEIsS0FBSyxDQUFDeUIsU0FBUyxDQUFDLE1BQU07SUFDcEIsZUFBZUMsR0FBRyxHQUFHO01BQ25CLElBQUk7UUFDRixNQUFNckIsT0FBTyxDQUFDRyxJQUFJLEVBQUVRLE1BQU0sRUFBRTtVQUFFLEdBQUdQLE1BQU07VUFBRWUsTUFBTTtVQUFFRyxPQUFPLEVBQUUsQ0FBQztVQUFFQyxLQUFLLEVBQUU7UUFBRSxDQUFDLENBQUM7UUFDeEVQLE9BQU8sQ0FBQyxJQUFJLENBQUM7TUFDZixDQUFDLENBQUMsT0FBT1EsQ0FBQyxFQUFFO1FBQ1ZSLE9BQU8sQ0FBQyxNQUFNO1VBQ1osTUFBTVEsQ0FBQztRQUNULENBQUMsQ0FBQztNQUNKO0lBQ0Y7SUFDQUgsR0FBRyxFQUFFO0VBQ1AsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLG9CQUNFLDBDQUNHLENBQUNOLElBQUksaUJBQ0osb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxJQUFJO0lBQUMsS0FBSyxFQUFDLE9BQU87SUFBQyxlQUFlLEVBQUM7RUFBTyxHQUN4QyxTQUFTLENBQ0wsZUFDUCxvQkFBQyxJQUFJLGFBQUcsQ0FBQ0csR0FBRyxDQUFDQSxHQUFHLENBQUNPLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUVDLElBQUksRUFBRSxDQUFRLENBRXJELEVBQ0FYLElBQUksaUJBQ0gsb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxJQUFJO0lBQUMsS0FBSyxFQUFDLE9BQU87SUFBQyxlQUFlLEVBQUM7RUFBTyxHQUN4QyxTQUFTLENBQ0wsZUFDUCxvQkFBQyxJQUFJLGFBQUdKLE1BQU0sQ0FBUSxFQUNyQlAsTUFBTSxDQUFDdUIsT0FBTyxpQkFBSSxvQkFBQyxJQUFJLGNBQUlwQixJQUFJLG1CQUFzQixDQUV6RCxDQUNBO0FBRVA7QUFFQXFCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLEdBQUcsQ0FBQ0MsS0FBSyxFQUFFO0VBQ25DLG9CQUNFLG9CQUFDLGFBQWEscUJBQ1osb0JBQUMsVUFBVSxFQUFLQSxLQUFLLENBQUksQ0FDWDtBQUVwQixDQUFDIn0=